#!/usr/bin/python
# -*- coding: utf-8 -*-

#module package
#一个 py 文件就是一个 module ，多个 module 组成一个 package


#if__name__='__main__'
#a.py

def louisa():
  a='louisa'
  return a

if __name__='__main__':
  louisa()
  
#b.py
def louisb():
  b='louisb'
  return b

if __name__='__main__':
    louisb()
    
#其中分别运行 a，b 文件的时候，if判断语句为真，是因为每个 module 都有一个属性，都为__main__,如果在一个 module 里面，打印此属性为 __main__
#可以运行，每一个文件都是一个module，可以作为一个模块导入到别的文件，当a文件导入b文件的时候，b文件中的if判断为假，if后面的将不会执行
#后面不会执行，这种情况可以防止写在单元测试的逻辑被运行


#nonlocal global
#nonlocal只在局部变量起作用, 且nonlocal只在python3里面有，global 调用全局变量
def louis():
    count = 1
    def louisa():
        nonlocal count
        count = 12
        return count
    louisa()
    a=print(count)
    return a

louis()
#其中，当使用nonlocal 时，对整个函数内部都有用
#输出值为12

def louis():
    count = 1
    def louisa():
        global count
        count = 12
        return count
    louisa()
    a=print(count)
    return a

louis()
#返回值为1，global 对整个全局变量都有用，但对嵌套的函数内部无效


#import 还需要理解，这个周六读资料

#列表去重
def uniquelist(lists):
    if type(lists)!=list:
        return '您输入的类型有误，必须输入列表，请重新输入'
    elif len(lists)==0:
        return '您输入的列表为空，无法计算'
    elif len(lists)==1:
        return '您输入的列表仅有一位，不需要去重'
    else:
        result=[]
        for r in lists:
            if not r in result:
                result.append(r)
        return result

 #列表排序，安装从大到小的顺序写的，后面采用了冒泡排序方法
def orderbylist(uniquelist):
    if type(uniquelist)!=list:
        return '您输入的类型不是列表，必须输入列表，请重新输入'
    elif len(uniquelist)==0:
        return '您输入的列表为空，不需排列大小'
    elif len(uniquelist)==1:
        return '您输入的列表仅有一位数，不需要排列大写'
    elif len(uniquelist)==2:
        result=[]
        result.append(min(uniquelist))
        result.append(max(uniquelist))
    else:
        count=len(uniquelist)
        for r in range(0,count):
            for rr in range(r+1,count):
                if uniquelist[r]>uniquelist[rr]:
                    uniquelist[r], uniquelist[rr]=uniquelist[rr], uniquelist[r]
        return uniquelist

